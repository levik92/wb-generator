import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import { FileText, Copy, Download, AlertCircle, Zap, Loader2 } from "lucide-react";

interface Profile {
  id: string;
  email: string;
  full_name: string | null;
  tokens_balance: number;
  wb_connected: boolean;
  referral_code: string;
}

interface GenerateDescriptionProps {
  profile: Profile;
  onTokensUpdate: () => void;
}

export const GenerateDescription = ({ profile, onTokensUpdate }: GenerateDescriptionProps) => {
  const [category, setCategory] = useState("");
  const [competitors, setCompetitors] = useState("");
  const [keywords, setKeywords] = useState("");
  const [generating, setGenerating] = useState(false);
  const [generatedText, setGeneratedText] = useState("");
  const { toast } = useToast();

  const canGenerate = () => {
    return category && competitors && keywords && profile.tokens_balance >= 1 && profile.wb_connected;
  };

  const getGuardMessage = () => {
    if (!category) return "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞";
    if (!competitors) return "–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤";
    if (!keywords) return "–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞";
    if (profile.tokens_balance < 1) return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ (–Ω—É–∂–µ–Ω 1)";
    if (!profile.wb_connected) return "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Wildberries –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö";
    return null;
  };

  const simulateGeneration = async () => {
    setGenerating(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const mockDescription = `üî• –ü–†–ï–ú–ò–£–ú –ö–ê–ß–ï–°–¢–í–û –ü–û –î–û–°–¢–£–ü–ù–û–ô –¶–ï–ù–ï!

‚úÖ –ù–∞—à ${category.toLowerCase()} —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏! 

üåü –û–°–ù–û–í–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω 
‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –î–æ–ª–≥–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞

üéØ –ò–î–ï–ê–õ–¨–ù–û –ü–û–î–•–û–î–ò–¢ –î–õ–Ø:
‚Ä¢ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–¥–∞—Ä–∫–∞ –±–ª–∏–∑–∫–∏–º
‚Ä¢ –†–µ—à–µ–Ω–∏—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á

üí° –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞

üöÄ –ë–´–°–¢–†–ê–Ø –î–û–°–¢–ê–í–ö–ê –ü–û –í–°–ï–ô –†–û–°–°–ò–ò!

üìû –û–°–¢–ê–õ–ò–°–¨ –í–û–ü–†–û–°–´? 
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —á–∞—Ç Wildberries - –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!

‚≠ê –ü–†–ò–°–û–ï–î–ò–ù–Ø–ô–¢–ï–°–¨ –ö –¢–´–°–Ø–ß–ê–ú –î–û–í–û–õ–¨–ù–´–• –ü–û–ö–£–ü–ê–¢–ï–õ–ï–ô!

#${keywords.replace(/,/g, ' #')} #–∫–∞—á–µ—Å—Ç–≤–æ #–¥–æ—Å—Ç–∞–≤–∫–∞ #wildberries`;

    setGeneratedText(mockDescription);
    setGenerating(false);
    
    toast({
      title: "–û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!",
      description: `${mockDescription.length} —Å–∏–º–≤–æ–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`,
    });
    
    onTokensUpdate();
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedText);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
      description: "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  const downloadAsFile = (format: 'txt' | 'docx' | 'pdf') => {
    toast({
      title: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ",
      description: `–§–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()} –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω`,
    });
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl font-bold mb-2">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π</h2>
        <p className="text-muted-foreground">
          –°–æ–∑–¥–∞–π—Ç–µ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (1000-2000 —Å–∏–º–≤–æ–ª–æ–≤)
        </p>
      </div>

      {/* Token Cost */}
      <Alert>
        <Zap className="h-4 w-4" />
        <AlertDescription>
          –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: <strong>1 —Ç–æ–∫–µ–Ω</strong> –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
        </AlertDescription>
      </Alert>

      {/* Guard Messages */}
      {!canGenerate() && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{getGuardMessage()}</AlertDescription>
        </Alert>
      )}

      {/* Input Form */}
      <div className="grid md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</CardTitle>
            <CardDescription>
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞</Label>
              <Select value={category} onValueChange={setCategory}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞">–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞</SelectItem>
                  <SelectItem value="–û–¥–µ–∂–¥–∞">–û–¥–µ–∂–¥–∞</SelectItem>
                  <SelectItem value="–û–±—É–≤—å">–û–±—É–≤—å</SelectItem>
                  <SelectItem value="–î–æ–º –∏ —Å–∞–¥">–î–æ–º –∏ —Å–∞–¥</SelectItem>
                  <SelectItem value="–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ">–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ</SelectItem>
                  <SelectItem value="–°–ø–æ—Ä—Ç">–°–ø–æ—Ä—Ç</SelectItem>
                  <SelectItem value="–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã">–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã</SelectItem>
                  <SelectItem value="–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã">–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="competitors">–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</Label>
              <Textarea
                id="competitors"
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ 1-3 —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã WB"
                value={competitors}
                onChange={(e) => setCompetitors(e.target.value)}
                rows={3}
              />
              <p className="text-xs text-muted-foreground">
                –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="keywords">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</Label>
              <Input
                id="keywords"
                placeholder="–∫–ª—é—á1, –∫–ª—é—á2, –∫–ª—é—á3"
                value={keywords}
                onChange={(e) => setKeywords(e.target.value)}
              />
              <p className="text-xs text-muted-foreground">
                –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—è—Ç—ã–º–∏
              </p>
            </div>

            <Button 
              onClick={simulateGeneration}
              disabled={!canGenerate() || generating}
              className="w-full bg-wb-purple hover:bg-wb-purple-dark"
            >
              {generating ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  –ì–µ–Ω–µ—Ä–∏—Ä—É—é...
                </>
              ) : (
                <>
                  <FileText className="w-4 h-4 mr-2" />
                  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (1 —Ç–æ–∫–µ–Ω)
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Generated Result */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>–ì–æ—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</CardTitle>
                <CardDescription>
                  {generatedText ? `${generatedText.length} —Å–∏–º–≤–æ–ª–æ–≤` : "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å"}
                </CardDescription>
              </div>
              {generatedText && (
                <div className="flex space-x-2">
                  <Button size="sm" variant="outline" onClick={copyToClipboard}>
                    <Copy className="w-4 h-4" />
                  </Button>
                </div>
              )}
            </div>
          </CardHeader>
          <CardContent>
            {generatedText ? (
              <div className="space-y-4">
                <Textarea
                  value={generatedText}
                  onChange={(e) => setGeneratedText(e.target.value)}
                  rows={12}
                  className="font-mono text-sm"
                />
                
                <div className="flex space-x-2">
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => downloadAsFile('txt')}
                  >
                    <Download className="w-4 h-4 mr-2" />
                    TXT
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => downloadAsFile('docx')}
                  >
                    <Download className="w-4 h-4 mr-2" />
                    DOCX
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => downloadAsFile('pdf')}
                  >
                    <Download className="w-4 h-4 mr-2" />
                    PDF
                  </Button>
                </div>
              </div>
            ) : (
              <div className="h-64 flex items-center justify-center text-muted-foreground">
                <div className="text-center">
                  <FileText className="w-12 h-12 mx-auto mb-4" />
                  <p>–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};