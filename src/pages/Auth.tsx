import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useSecurityLogger } from "@/hooks/useSecurityLogger";
import { ArrowLeft, Zap, Loader2, Gift } from "lucide-react";
import { FcGoogle } from "react-icons/fc";
import { Link, useNavigate, useSearchParams } from "react-router-dom";
import HCaptcha from "@hcaptcha/react-hcaptcha";

const Auth = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [agreeToTerms, setAgreeToTerms] = useState(false);
  const [loading, setLoading] = useState(false);
  const [resetEmail, setResetEmail] = useState("");
  const [activeTab, setActiveTab] = useState("signin");
  const [newPassword, setNewPassword] = useState("");
  const [confirmNewPassword, setConfirmNewPassword] = useState("");
  const [showTermsError, setShowTermsError] = useState(false);
  const [captchaToken, setCaptchaToken] = useState<string | null>(null);
  const captchaRef = useRef<HCaptcha>(null);
  const { toast } = useToast();
  const { logLoginAttempt } = useSecurityLogger();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const referralCode = searchParams.get('ref');
  const tabParam = searchParams.get('tab');
  
  // hCaptcha site key from Supabase project settings
  const HCAPTCHA_SITE_KEY = "e5f5d7d1-8e7f-4f7a-9b5a-3c5e5f5d7d1a"; // Replace with your actual site key

  useEffect(() => {
    if (tabParam === 'reset-password') {
      setActiveTab('new-password');
    }
  }, [tabParam]);

  const validatePassword = (password: string): { isValid: boolean; message?: string } => {
    if (password.length < 8) {
      return { isValid: false, message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤" };
    }
    
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumbers = /\d/.test(password);
    
    if (!hasUppercase || !hasLowercase || !hasNumbers) {
      return { 
        isValid: false, 
        message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, –∞ —Ç–∞–∫–∂–µ —Ü–∏—Ñ—Ä—ã" 
      };
    }
    
    return { isValid: true };
  };

  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!agreeToTerms) {
      setShowTermsError(true);
      toast({
        title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
        variant: "destructive",
      });
      return;
    }

    // Check captcha
    if (!captchaToken) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.",
        variant: "destructive",
      });
      return;
    }

    // Validate password complexity
    const passwordValidation = validatePassword(password);
    if (!passwordValidation.isValid) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: passwordValidation.message,
        variant: "destructive",
      });
      return;
    }

    // Check if passwords match
    if (password !== confirmPassword) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
        variant: "destructive",
      });
      return;
    }
    
    setLoading(true);

    try {
      // First check if email already exists
      console.log('Starting signup with referral code:', referralCode);
      const { data: emailCheckData, error: emailCheckError } = await supabase.functions.invoke('check-email-exists', {
        body: { email }
      });

      if (emailCheckError) {
        console.error('Error checking email:', emailCheckError);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email');
      }

      // If email exists, show message to use login tab
      if (emailCheckData.exists) {
        toast({
          title: "–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          description: "–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫—É '–í—Ö–æ–¥'.",
          variant: "destructive",
          duration: 8000,
        });
        setLoading(false);
        return;
      }

      // If email doesn't exist, proceed with signup
      const redirectUrl = `${window.location.origin}/dashboard`;
      
      const signupOptions: any = {
        emailRedirectTo: redirectUrl,
        captchaToken: captchaToken
      };

      // Add referral code if present
      if (referralCode) {
        console.log('Adding referral code to signup:', referralCode);
        signupOptions.data = {
          referral_code: referralCode
        };
      }
      
      console.log('Signup options:', signupOptions);
      const { error } = await supabase.auth.signUp({
        email,
        password,
        options: signupOptions
      });
      
      // Reset captcha after attempt
      setCaptchaToken(null);
      captchaRef.current?.resetCaptcha();

      if (error) {
        console.error('Signup error:', error);
        // Log failed signup attempt
        await logLoginAttempt(email, false, error.message);
        throw error;
      }

      console.log('Signup successful');
      // Log successful signup
      await logLoginAttempt(email, true);

      toast({
        title: "–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! üìß",
        description: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–≤–æ—é –ø–æ—á—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É —Å–ø–∞–º). –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–∫—É '–í—Ö–æ–¥'.",
        duration: 10000,
      });
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Check captcha
    if (!captchaToken) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.",
        variant: "destructive",
      });
      return;
    }
    
    setLoading(true);

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
        options: {
          captchaToken: captchaToken
        }
      });
      
      // Reset captcha after attempt
      setCaptchaToken(null);
      captchaRef.current?.resetCaptcha();

      if (error) {
        // Log failed login attempt
        await logLoginAttempt(email, false, error.message);
        throw error;
      }

      if (data.user) {
        // Log successful login
        await logLoginAttempt(email, true);
        
        toast({
          title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
          description: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.",
        });
        navigate("/dashboard");
      }
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordReset = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(resetEmail, {
        redirectTo: `${window.location.origin}/auth?tab=reset-password`,
      });

      if (error) {
        throw error;
      }

      toast({
        title: "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.",
        duration: 8000,
      });
      
      setActiveTab("signin");
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleUpdatePassword = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate password complexity
    const passwordValidation = validatePassword(newPassword);
    if (!passwordValidation.isValid) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: passwordValidation.message,
        variant: "destructive",
      });
      return;
    }

    // Check if passwords match
    if (newPassword !== confirmNewPassword) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
        variant: "destructive",
      });
      return;
    }
    
    setLoading(true);

    try {
      const { error } = await supabase.auth.updateUser({
        password: newPassword
      });

      if (error) {
        throw error;
      }

      toast({
        title: "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
        description: "–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.",
      });
      
      navigate("/dashboard");
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    // Check if on signup tab and terms not agreed
    if (activeTab === 'signup' && !agreeToTerms) {
      setShowTermsError(true);
      toast({
        title: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ",
        description: "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
        variant: "destructive",
      });
      return;
    }

    try {
      setLoading(true);
      const redirectUrl = `${window.location.origin}/dashboard`;
      
      const options: any = {
        redirectTo: redirectUrl
      };

      // Add referral code if present (only for signup)
      if (activeTab === 'signup' && referralCode) {
        options.options = {
          data: {
            referral_code: referralCode
          }
        };
      }

      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        ...options
      });

      if (error) {
        throw error;
      }
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-6">
      <div className="w-full max-w-md">
        {/* Header */}
        <div className="text-center mb-8">
          <Link to="/" className="inline-flex items-center text-muted-foreground hover:text-foreground mb-6">
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Link>
          
          <div className="flex items-center justify-center space-x-2 mb-4">
            <div className="w-8 h-8 bg-gradient-hero rounded-[12px] flex items-center justify-center">
              <Zap className="w-5 h-5 text-white" />
            </div>
            <span className="text-xl font-semibold">WB –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä</span>
          </div>
          
          <h1 className="text-2xl font-bold">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h1>
          <p className="text-muted-foreground">
            –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
          </p>
        </div>

        <Card>
          <CardHeader className="space-y-1">
            <div className="bg-wb-purple/10 text-wb-purple px-3 py-2 rounded-lg text-sm text-center">
              {referralCode ? (
                <>
                  <Gift className="w-4 h-4 inline mr-2" />
                  üéâ 35 —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (25 + 10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ)
                </>
              ) : (
                "üéâ 25 —Ç–æ–∫–µ–Ω–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
              )}
            </div>
          </CardHeader>
          <CardContent>
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              {activeTab !== 'new-password' && activeTab !== 'reset' && (
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="signin">–í—Ö–æ–¥</TabsTrigger>
                  <TabsTrigger value="signup">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</TabsTrigger>
                </TabsList>
              )}
              
              <TabsContent value="signin">
                <form onSubmit={handleSignIn} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      placeholder="your@email.com"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                    <Input
                      id="password"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      required
                    />
                  </div>
                  
                  <div className="flex justify-center">
                    <HCaptcha
                      sitekey={HCAPTCHA_SITE_KEY}
                      onVerify={(token) => setCaptchaToken(token)}
                      onExpire={() => setCaptchaToken(null)}
                      ref={captchaRef}
                    />
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full bg-wb-purple hover:bg-wb-purple-dark"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        –í—Ö–æ–¥...
                      </>
                    ) : (
                      "–í–æ–π—Ç–∏"
                    )}
                  </Button>
                  
                  <div className="text-center">
                    <button
                      type="button"
                      onClick={() => setActiveTab("reset")}
                      className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                    >
                      –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
                    </button>
                  </div>

                  <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                      <span className="w-full border-t" />
                    </div>
                    <div className="relative flex justify-center text-xs uppercase">
                      <span className="bg-background px-2 text-muted-foreground">–∏–ª–∏</span>
                    </div>
                  </div>

                  <Button
                    type="button"
                    variant="outline"
                    className="w-full"
                    onClick={handleGoogleSignIn}
                    disabled={loading}
                  >
                    <FcGoogle className="w-5 h-5 mr-2" />
                    –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
                  </Button>
                </form>
              </TabsContent>
              
              <TabsContent value="reset">
                <form onSubmit={handlePasswordReset} className="space-y-4">
                  <div className="text-center mb-4">
                    <h3 className="text-lg font-semibold">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h3>
                    <p className="text-sm text-muted-foreground">
                      –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
                    </p>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="reset-email">Email</Label>
                    <Input
                      id="reset-email"
                      type="email"
                      placeholder="your@email.com"
                      value={resetEmail}
                      onChange={(e) => setResetEmail(e.target.value)}
                      required
                    />
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full bg-wb-purple hover:bg-wb-purple-dark"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        –û—Ç–ø—Ä–∞–≤–∫–∞...
                      </>
                    ) : (
                      "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"
                    )}
                  </Button>
                  
                  <div className="text-center">
                    <button
                      type="button"
                      onClick={() => setActiveTab("signin")}
                      className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                    >
                      –í–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –≤—Ö–æ–¥—É
                    </button>
                  </div>
                </form>
              </TabsContent>
              
              <TabsContent value="new-password">
                <form onSubmit={handleUpdatePassword} className="space-y-4">
                  <div className="text-center mb-4">
                    <h3 className="text-lg font-semibold">–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è</h3>
                    <p className="text-sm text-muted-foreground">
                      –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    </p>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="new-password">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</Label>
                    <Input
                      id="new-password"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      required
                      minLength={8}
                    />
                    <p className="text-xs text-muted-foreground">
                      –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã
                    </p>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="confirm-new-password">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</Label>
                    <Input
                      id="confirm-new-password"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      value={confirmNewPassword}
                      onChange={(e) => setConfirmNewPassword(e.target.value)}
                      required
                      minLength={8}
                    />
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full bg-wb-purple hover:bg-wb-purple-dark"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                      </>
                    ) : (
                      "–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"
                    )}
                  </Button>
                </form>
              </TabsContent>
              
              <TabsContent value="signup">
                <form onSubmit={handleSignUp} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="signup-email">Email</Label>
                    <Input
                      id="signup-email"
                      type="email"
                      placeholder="your@email.com"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      required
                    />
                  </div>
                   <div className="space-y-2">
                     <Label htmlFor="signup-password">–ü–∞—Ä–æ–ª—å</Label>
                     <Input
                       id="signup-password"
                       type="password"
                       placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                       value={password}
                       onChange={(e) => setPassword(e.target.value)}
                       required
                       minLength={8}
                     />
                     <p className="text-xs text-muted-foreground">
                       –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã
                     </p>
                   </div>
                   
                   <div className="space-y-2">
                     <Label htmlFor="signup-confirm-password">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
                     <Input
                       id="signup-confirm-password"
                       type="password"
                       placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                       value={confirmPassword}
                       onChange={(e) => setConfirmPassword(e.target.value)}
                       required
                       minLength={8}
                     />
                     <p className="text-xs text-muted-foreground">
                       –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                     </p>
                   </div>
                  
                  <div className="flex items-start space-x-2">
                    <Checkbox 
                      id="agree-terms"
                      checked={agreeToTerms}
                      onCheckedChange={(checked) => {
                        setAgreeToTerms(checked === true);
                        if (checked) setShowTermsError(false);
                      }}
                      className={showTermsError && !agreeToTerms ? "border-2 border-destructive" : ""}
                    />
                    <label
                      htmlFor="agree-terms"
                      className="text-sm text-muted-foreground leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                    >
                      –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å{" "}
                      <Link to="/terms" className="text-wb-purple hover:underline" onClick={(e) => e.stopPropagation()}>
                        –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã
                      </Link>{" "}
                      –∏{" "}
                      <Link to="/privacy" className="text-wb-purple hover:underline" onClick={(e) => e.stopPropagation()}>
                        –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                      </Link>
                    </label>
                  </div>
                  
                  <div className="flex justify-center">
                    <HCaptcha
                      sitekey={HCAPTCHA_SITE_KEY}
                      onVerify={(token) => setCaptchaToken(token)}
                      onExpire={() => setCaptchaToken(null)}
                      ref={captchaRef}
                    />
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full bg-wb-purple hover:bg-wb-purple-dark"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...
                      </>
                    ) : (
                      "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
                    )}
                  </Button>

                  <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                      <span className="w-full border-t" />
                    </div>
                    <div className="relative flex justify-center text-xs uppercase">
                      <span className="bg-background px-2 text-muted-foreground">–∏–ª–∏</span>
                    </div>
                  </div>

                  <Button
                    type="button"
                    variant="outline"
                    className="w-full"
                    onClick={handleGoogleSignIn}
                    disabled={loading}
                  >
                    <FcGoogle className="w-5 h-5 mr-2" />
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Google
                  </Button>
                </form>
              </TabsContent>
            </Tabs>

            <Separator className="my-4" />
            
            <div className="text-center text-xs text-muted-foreground">
              {activeTab === 'signup' && "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É \"–í—Ö–æ–¥\""}
              {activeTab === 'signin' && "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É \"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\""}
              {activeTab === 'reset' && "–í—Å–ø–æ–º–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å? –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫–æ –≤—Ö–æ–¥—É"}
              {activeTab === 'new-password' && "–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–π–¥–µ—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É"}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Auth;